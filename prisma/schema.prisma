generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql" // or switch to Postgres/MySQL for production
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id
  firstName  String
  lastName   String
  username   String   @unique
  password   String
  email      String   @unique
  avatarUrl  String?
  createdAt  DateTime  @default(now())
  properties Property[]
}

model Property {
  id             Int       @id @default(autoincrement())
  propertyId     String    @unique
  title          String
  userId         String
  user           User       @relation(fields: [userId], references: [id])
  propertyTypeId Int
  type           PropertyType @relation(fields: [propertyTypeId], references: [id])
  statusId       Int
  status         PropertyStatus @relation(fields: [statusId], references: [id])
  providerId     String?
  provider       Provider?      @relation(fields: [providerId], references: [id])
  propertyRangeId Int?
  propertyRange   PropertyRange? @relation(fields: [propertyRangeId], references: [id])
  illuminationId Int?
  illumination   Illumination? @relation(fields: [illuminationId], references: [id])
  propertyConditionId Int?
  propertyCondition PropertyCondition? @relation(fields: [propertyConditionId], references: [id])
  zoneDemandId Int?
  zoneDemand   ZoneDemand? @relation(fields: [zoneDemandId], references: [id])
  accesibilityId Int?
  accesibility   Accesibility? @relation(fields: [accesibilityId], references: [id]) 
  description    String?
  price          Float
  createdAt      DateTime   @default(now()) 
  availability Boolean @default(true)
  videoUrl       String?
  
  features      PropertyFeature?
  location    PropertyLocation?
  images        PropertyImage[]
}

model PropertyFeature {
  id        Int      @id @default(autoincrement())
  value     String
  bedrooms      Int?
  bathrooms     Int?
  halfBathrooms Int?
  balcon         Boolean? @default(false)
  pool           Boolean? @default(false)
  terrainM2    Float?
  constructionM2 Float?
  levels         Int?
  downtown         Boolean? @default(false)
  parking       Int?
  acceptsCreditBank Boolean? @default(false)
  acceptsCreditSocial Boolean? @default(false)
  age          Int?
  connectivity   String?
  furnished    Boolean? @default(false)
  greenAreas   String?
  propertyId Int @unique
  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyLocation {
  id        Int      @id @default(autoincrement())
  value     String
  address        String?
  zipCode        Int?
  urlGoogleMaps String?
  cityId         Int
  city           City       @relation(fields: [cityId], references: [id])
  propertyId Int @unique
  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyImage {
  id        Int      @id @default(autoincrement())
  url       String
  propertyId Int
  property  Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model PropertyType {
  id        Int        @id @default(autoincrement())
  value     String
  Property  Property[]
}

model PropertyStatus {
  id        Int        @id @default(autoincrement())
  value     String
  Property  Property[]
}

model State {
  id        Int      @id @default(autoincrement())
  name      String
  cities    City[]
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  stateId   Int
  state     State    @relation(fields: [stateId], references: [id])
  properties PropertyLocation[]
}

model Provider {
  id        String   @id
  value     String
  
  // Relations
  properties Property[]
}

model PropertyRange {
  id        Int      @id @default(autoincrement())
  value     String
  properties Property[]
}

model Illumination {
  id        Int      @id @default(autoincrement())
  value     String
  properties Property[]
}

model PropertyCondition {
  id        Int      @id @default(autoincrement())
  value     String
  properties Property[]
}

model ZoneDemand {
  id        Int      @id @default(autoincrement())
  value     String
  properties Property[]
}

model Accesibility {
  id        Int      @id @default(autoincrement())
  value     String
  properties Property[]
}